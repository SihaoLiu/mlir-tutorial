# Enable Bzlmod for every Bazel command
common --enable_bzlmod

# Original configurations
common --action_env=BAZEL_CXXOPTS=-std=c++17
build --action_env=CCACHE_DISABLE=1
build --action_env=CC=/usr/bin/gcc
build --action_env=CXX=/usr/bin/g++
common --cxxopt='-std=c++17'
common --deleted_packages=externals
build:macos --apple_platform_type=macos
build:macos --macos_minimum_os=10.13
build:macos --macos_sdk_version=10.13
build:macos_arm64 --cpu=darwin_arm64
common --copt=-fdiagnostics-color=always
common --test_output=errors
common -c dbg

# Additional optimizations for C++ compilation
# Note: boost.thread requires exceptions, boost.serialization requires RTTI
build --cxxopt=-fexceptions
# Disabled RTTI as some boost components need it
# build --cxxopt=-fno-rtti

# GNU source compatibility
build --cxxopt=-D_GNU_SOURCE
build --cxxopt=-D__STDC_CONSTANT_MACROS
build --cxxopt=-D__STDC_FORMAT_MACROS
build --cxxopt=-D__STDC_LIMIT_MACROS

# Debug build configuration (similar to CMAKE_BUILD_TYPE=DEBUG)
build:debug --cxxopt=-g
build:debug --cxxopt=-O0
build:debug --strip=never
build:debug --copt=-DDEBUG

# Release build configuration (similar to CMAKE_BUILD_TYPE=RELEASE)  
build:release --cxxopt=-O3
build:release --cxxopt=-DNDEBUG
build:release --strip=always

# Build with assertions enabled (similar to LLVM_ENABLE_ASSERTIONS=ON)
build:assertions --cxxopt=-UNDEBUG
build:assertions --cxxopt=-DMLIR_ENABLE_ASSERTIONS

# Verbose output (similar to ninja -v)
build:verbose --subcommands=pretty_print
build:verbose --verbose_failures

# Parallel build (similar to ninja -j)
build --jobs=auto

# Test configuration
test --test_output=errors
test --test_summary=short

# Cache configuration, disable ccache since bazel cache system is much better
build --disk_cache=~/.cache/bazel
build --repository_cache=~/.cache/bazel/repo

# Compatibility settings
build --incompatible_enable_cc_toolchain_resolution

# Sandbox Location configuration
build --sandbox_base=/dev/shm
